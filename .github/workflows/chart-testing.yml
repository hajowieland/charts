name: Chart-Testing

on:
  workflow_call:
  workflow_dispatch:

jobs:

  detect-changed-charts:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.get-changed-charts.outputs.matrix }}
    steps:
      - name: checkout git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ github.head_ref }}

      - name: setup helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Identify changed charts
        id: get-changed-charts
        run: |
          CHANGED_CHARTS=$(ct list-changed --config .github/config/chart-testing.yaml | jq -c --slurp --raw-input 'split("\n")[:-1] | map({chart: .})')
          echo "matrix=$CHANGED_CHARTS" >> $GITHUB_OUTPUT

      - name: Debug matrix ouput
        run: echo "${{ steps.get-changed-charts.outputs.matrix }}"

  installation:
    needs: detect-changed-charts
    runs-on: ubuntu-24.04
    if: ${{ needs.detect-changed-charts.outputs.matrix != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.detect-changed-charts.outputs.matrix) }}
    steps:
      - name: checkout git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ github.head_ref }}

      - name: setup helm
        uses: azure/setup-helm@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0

      - name: Prepare Chart CI Environment (Execute ci/*.sh)
        id: prepare_ci
        run: |
          CHART_PATH="${{ matrix.chart }}"
          CI_DIR="$CHART_PATH/ci"

          echo "Checking for CI setup in: $CI_DIR for chart $CHART_PATH"
          if [[ -d "$CI_DIR" ]]; then
            echo "CI directory found."
            if compgen -G "$CI_DIR/*.sh" > /dev/null; then
              echo "Executing scripts found in $CI_DIR (alphabetical order)..."
              find "$CI_DIR" -maxdepth 1 -name '*.sh' -print0 | sort -z | xargs -0 -I {} bash "{}"
              SCRIPT_EXIT_CODE=$?
              if [[ $SCRIPT_EXIT_CODE -ne 0 ]]; then
                echo "Error executing scripts in $CI_DIR. Exit code: $SCRIPT_EXIT_CODE"
                exit $SCRIPT_EXIT_CODE
              fi
              echo "Finished executing scripts."
            else
              echo "No executable scripts (*.sh) found in $CI_DIR."
            fi
          else
            echo "CI directory '$CI_DIR' not found. Skipping CI preparation steps."
          fi
        shell: bash

      - name: Run chart-testing (install)
        run: |
          CHART_PATH="${{ matrix.chart }}"
          echo "Running ct install for $CHART_PATH"
          # ct install will automatically find and use 'charts/CHART_NAME/ci/*-values.yaml'
          # No need to pass --values or --helm-extra-args for the values file here.
          ct install --charts "$CHART_PATH" --config .github/config/chart-testing.yaml
