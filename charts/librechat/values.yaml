# Default values for librechat.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/danny-avila/librechat
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  # -- filesystems needs to be writable - or LibreChat fails at startup
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

networkPolicies:
  enabled: true

service:
  type: ClusterIP
  port: 3080

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chat.example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 3
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 3

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# -- initContainer to wait until all components (meilisearch, sandpack, ragapi) are ready before running LibreChat.
wait:
  enabled: false
  image:
    repository: alpine/curl
    tag: "8.12.1"
    pullPolicy: IfNotPresent

exporter:
  enabled: false

meilisearch:
  enabled: false
  environment:
    MEILI_NO_ANALYTICS: false
    MEILI_ENV: production
  persistence:
    enabled: false

ragapi:
  enabled: false

sandpack:
  enabled: false
  applicationName: librechat-sandpack
  deployment:
    image:
      repository: "ghcr.io/librechat-ai/codesandbox-client/bundler"
      tag: latest
      pullPolicy: Always
    containerSecurityContext:
      readOnlyRootFilesystem: false
      runAsNonRoot: false
    livenessProbe:
      enabled: true
      httpGet:
        path: /
        port: http
        scheme: HTTP
    readinessProbe:
      enabled: true
      httpGet:
        path: /
        port: http
        scheme: HTTP
    ports:
      - name: http
        protocol: TCP
        containerPort: 80
  service:
    ports:
      - port: 80
        name: http
        protocol: TCP
        targetPort: 80

config:
  envSecrets:
    # Use this when using one k8s secret for multiply env secrets
    # secretRef: librechat

    # Use this when using one k8s secret for each env secret
    secretKeyRef: []
  #      - name: MONGO_URI
  #        secretName: librechat-db-cluster-admin-librechat
  #        secretKey: "connectionString.standard"

  env:
    # Full list of possible values
    # https://github.com/danny-avila/LibreChat/blob/main/.env.example
    ALLOW_EMAIL_LOGIN: "true"
    ALLOW_REGISTRATION: "false"
    ALLOW_SOCIAL_LOGIN: "false"
    ALLOW_SOCIAL_REGISTRATION: "false"
  # -- sets DOMAIN_CLIENT and DOMAIN_SERVER, should be the external URL like https://chat.example.com
  externalDomain: ""
  # -- Examples: https://github.com/LibreChat-AI/librechat-config-yaml
  librechatYaml:
    version: 1.2.5
